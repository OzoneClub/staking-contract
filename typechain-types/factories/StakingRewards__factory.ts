/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingRewards,
  StakingRewardsInterface,
} from "../StakingRewards";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_stakingToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_rewardsToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "earned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPerTokenStored",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardsToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userRewardPerTokenPaid",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052678ac7230489e80000600255670de0b6b3a76400006003553480156200002957600080fd5b5060405162000fc038038062000fc083398181016040528101906200004f919062000142565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000189565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010a82620000dd565b9050919050565b6200011c81620000fd565b81146200012857600080fd5b50565b6000815190506200013c8162000111565b92915050565b600080604083850312156200015c576200015b620000d8565b5b60006200016c858286016200012b565b92505060206200017f858286016200012b565b9150509250929050565b610e2780620001996000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c806372f702f31161008c578063a694fc3a11610066578063a694fc3a1461024c578063cd3daf9d14610268578063d1af0c7d14610286578063df136d65146102a4576100e9565b806372f702f3146101e05780637b0a47ee146101fe5780638b8763471461021c576100e9565b80632e1a7d4d116100c85780632e1a7d4d1461016c5780633d18b912146101885780633eaaf86b146101925780636ebcf607146101b0576100e9565b80628cc262146100ee5780630700037d1461011e5780632552317c1461014e575b600080fd5b61010860048036038101906101039190610a76565b6102c2565b6040516101159190610abc565b60405180910390f35b61013860048036038101906101339190610a76565b6103be565b6040516101459190610abc565b60405180910390f35b6101566103d6565b6040516101639190610abc565b60405180910390f35b61018660048036038101906101819190610b03565b6103dc565b005b610190610598565b005b61019a61076c565b6040516101a79190610abc565b60405180910390f35b6101ca60048036038101906101c59190610a76565b610772565b6040516101d79190610abc565b60405180910390f35b6101e861078a565b6040516101f59190610b8f565b60405180910390f35b6102066107b0565b6040516102139190610abc565b60405180910390f35b61023660048036038101906102319190610a76565b6107b6565b6040516102439190610abc565b60405180910390f35b61026660048036038101906102619190610b03565b6107ce565b005b61027061098c565b60405161027d9190610abc565b60405180910390f35b61028e6109e9565b60405161029b9190610b8f565b60405180910390f35b6102ac610a0d565b6040516102b99190610abc565b60405180910390f35b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461034c61098c565b6103569190610bd9565b600354600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103a39190610c3c565b6103ad9190610c6d565b6103b79190610cc7565b9050919050565b60076020528060005260406000206000915090505481565b60045481565b336103e561098c565b600581905550436004819055506103fb816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860008282546104969190610bd9565b9250508190555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104ec9190610bd9565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610550929190610d2c565b6020604051808303816000875af115801561056f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105939190610d8d565b505050565b336105a161098c565b600581905550436004819055506105b7816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610724929190610d2c565b6020604051808303816000875af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610d8d565b505050565b60085481565b60096020528060005260406000206000915090505481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60066020528060005260406000206000915090505481565b336107d761098c565b600581905550436004819055506107ed816102c2565b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600554600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600860008282546108889190610cc7565b9250508190555081600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108de9190610cc7565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161094493929190610dba565b6020604051808303816000875af1158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190610d8d565b505050565b60008060085414156109a157600090506109e6565b6003546008546109b19190610c3c565b600254600454436109c29190610bd9565b6109cc9190610c6d565b6109d69190610c3c565b6005546109e39190610cc7565b90505b90565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4382610a18565b9050919050565b610a5381610a38565b8114610a5e57600080fd5b50565b600081359050610a7081610a4a565b92915050565b600060208284031215610a8c57610a8b610a13565b5b6000610a9a84828501610a61565b91505092915050565b6000819050919050565b610ab681610aa3565b82525050565b6000602082019050610ad16000830184610aad565b92915050565b610ae081610aa3565b8114610aeb57600080fd5b50565b600081359050610afd81610ad7565b92915050565b600060208284031215610b1957610b18610a13565b5b6000610b2784828501610aee565b91505092915050565b6000819050919050565b6000610b55610b50610b4b84610a18565b610b30565b610a18565b9050919050565b6000610b6782610b3a565b9050919050565b6000610b7982610b5c565b9050919050565b610b8981610b6e565b82525050565b6000602082019050610ba46000830184610b80565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610be482610aa3565b9150610bef83610aa3565b925082821015610c0257610c01610baa565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c4782610aa3565b9150610c5283610aa3565b925082610c6257610c61610c0d565b5b828204905092915050565b6000610c7882610aa3565b9150610c8383610aa3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610cbc57610cbb610baa565b5b828202905092915050565b6000610cd282610aa3565b9150610cdd83610aa3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d1257610d11610baa565b5b828201905092915050565b610d2681610a38565b82525050565b6000604082019050610d416000830185610d1d565b610d4e6020830184610aad565b9392505050565b60008115159050919050565b610d6a81610d55565b8114610d7557600080fd5b50565b600081519050610d8781610d61565b92915050565b600060208284031215610da357610da2610a13565b5b6000610db184828501610d78565b91505092915050565b6000606082019050610dcf6000830186610d1d565b610ddc6020830185610d1d565b610de96040830184610aad565b94935050505056fea2646970667358221220ad282c5caa980a3c2a8bbf80c97d7faba82a0f7e68895ae53070663be60db4d264736f6c634300080a0033";

type StakingRewardsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingRewardsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingRewards__factory extends ContractFactory {
  constructor(...args: StakingRewardsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StakingRewards";
  }

  deploy(
    _stakingToken: string,
    _rewardsToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingRewards> {
    return super.deploy(
      _stakingToken,
      _rewardsToken,
      overrides || {}
    ) as Promise<StakingRewards>;
  }
  getDeployTransaction(
    _stakingToken: string,
    _rewardsToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _stakingToken,
      _rewardsToken,
      overrides || {}
    );
  }
  attach(address: string): StakingRewards {
    return super.attach(address) as StakingRewards;
  }
  connect(signer: Signer): StakingRewards__factory {
    return super.connect(signer) as StakingRewards__factory;
  }
  static readonly contractName: "StakingRewards";
  public readonly contractName: "StakingRewards";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingRewardsInterface {
    return new utils.Interface(_abi) as StakingRewardsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingRewards {
    return new Contract(address, _abi, signerOrProvider) as StakingRewards;
  }
}
